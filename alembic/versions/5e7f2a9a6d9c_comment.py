"""comment

Revision ID: 5e7f2a9a6d9c
Revises: 
Create Date: 2024-05-17 11:11:54.918272

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5e7f2a9a6d9c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_index('ix_videos_id', table_name='videos')
    # op.drop_table('videos')
    # op.drop_index('ix_objects_id', table_name='objects')
    # op.drop_table('objects')
    # op.drop_index('ix_obj_comments_id', table_name='obj_comments')
    # op.drop_table('obj_comments')
    # op.drop_index('ix_node_tags_id', table_name='node_tags')
    # op.drop_table('node_tags')
    # op.drop_table('objectfiles')
    # op.drop_index('ix_subscriptions_id', table_name='subscriptions')
    # op.drop_table('subscriptions')
    # op.drop_index('ix_anchors_id', table_name='anchors')
    # op.drop_table('anchors')
    # op.drop_index('ix_node_likes_id', table_name='node_likes')
    # op.drop_table('node_likes')
    # op.drop_index('ix_nodes_id', table_name='nodes')
    # op.drop_table('nodes')
    # op.drop_index('ix_node_comments_id', table_name='node_comments')
    # op.drop_table('node_comments')
    # op.drop_table('fileUploads')
    # op.drop_table('jsons')
    # op.drop_index('ix_obj_likes_id', table_name='obj_likes')
    # op.drop_table('obj_likes')
    # op.drop_index('ix_obj_tags_id', table_name='obj_tags')
    # op.drop_table('obj_tags')
    # op.drop_index('ix_obj_saves_id', table_name='obj_saves')
    # op.drop_table('obj_saves')
    # op.drop_table('photos')
    # op.drop_index('ix_node_saves_id', table_name='node_saves')
    # op.drop_table('node_saves')
    # op.drop_index('ix_users_email', table_name='users')
    # op.drop_index('ix_users_user_id', table_name='users')
    # op.drop_table('users')
    # # ### end Alembic commands ###
    pass


def downgrade() -> None:
    # # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('users',
    # sa.Column('user_id', sa.INTEGER(), server_default=sa.text("nextval('users_user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    # sa.Column('email', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('username', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('password', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('socialKind', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('phone_number', sa.BIGINT(), autoincrement=False, nullable=False),
    # sa.Column('self_intro', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=False),
    # sa.Column('latitude', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('longitude', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('login_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('payment_dt', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('payment_status', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('user_id', name='users_pkey'),
    # sa.UniqueConstraint('username', name='users_username_key'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_index('ix_users_user_id', 'users', ['user_id'], unique=False)
    # op.create_index('ix_users_email', 'users', ['email'], unique=False)
    # op.create_table('node_saves',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('node_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['node_id'], ['nodes.id'], name='node_saves_node_id_fkey', ondelete='CASCADE'),
    # sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='node_saves_user_id_fkey', ondelete='CASCADE'),
    # sa.PrimaryKeyConstraint('id', name='node_saves_pkey')
    # )
    # op.create_index('ix_node_saves_id', 'node_saves', ['id'], unique=False)
    # op.create_table('photos',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('photo_url', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='photos_user_id_fkey', ondelete='CASCADE'),
    # sa.PrimaryKeyConstraint('id', name='photos_pkey')
    # )
    # op.create_table('obj_saves',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('object_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='obj_saves_user_id_fkey', ondelete='CASCADE'),
    # sa.PrimaryKeyConstraint('id', name='obj_saves_pkey')
    # )
    # op.create_index('ix_obj_saves_id', 'obj_saves', ['id'], unique=False)
    # op.create_table('obj_tags',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('object_id', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('tag', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name='obj_tags_pkey')
    # )
    # op.create_index('ix_obj_tags_id', 'obj_tags', ['id'], unique=False)
    # op.create_table('obj_likes',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('object_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='obj_likes_user_id_fkey', ondelete='CASCADE'),
    # sa.PrimaryKeyConstraint('id', name='obj_likes_pkey')
    # )
    # op.create_index('ix_obj_likes_id', 'obj_likes', ['id'], unique=False)
    # op.create_table('jsons',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('node_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('json_url', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['node_id'], ['nodes.id'], name='jsons_node_id_fkey', ondelete='CASCADE'),
    # sa.PrimaryKeyConstraint('id', name='jsons_pkey')
    # )
    # op.create_table('fileUploads',
    # sa.Column('fileUpload_id', sa.INTEGER(), server_default=sa.text('nextval(\'"fileUploads_fileUpload_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    # sa.Column('fileUpload_uuid', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('fileUpload_path', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('fileUpload_filename', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('fileUpload_file_count', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('fileUpload_status', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('fileUpload_conversion_type', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('fileUpload_reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('fileUpload_mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['owner_id'], ['users.user_id'], name='fileUploads_owner_id_fkey', ondelete='CASCADE'),
    # sa.PrimaryKeyConstraint('fileUpload_id', name='fileUploads_pkey')
    # )
    # op.create_table('node_comments',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('node_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('comment', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['node_id'], ['nodes.id'], name='node_comments_node_id_fkey', ondelete='CASCADE'),
    # sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='node_comments_user_id_fkey', ondelete='CASCADE'),
    # sa.PrimaryKeyConstraint('id', name='node_comments_pkey')
    # )
    # op.create_index('ix_node_comments_id', 'node_comments', ['id'], unique=False)
    # op.create_table('nodes',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('nodes_id_seq'::regclass)"), autoincrement=True, nullable=False),
    # sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('latitude', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('longitude', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('object_id', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('node_title', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('node_description', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('status', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('node_json_path', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('node_json_name', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='nodes_user_id_fkey', ondelete='CASCADE'),
    # sa.PrimaryKeyConstraint('id', name='nodes_pkey'),
    # sa.UniqueConstraint('node_title', name='nodes_node_title_key'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_index('ix_nodes_id', 'nodes', ['id'], unique=False)
    # op.create_table('node_likes',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('node_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['node_id'], ['nodes.id'], name='node_likes_node_id_fkey', ondelete='CASCADE'),
    # sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='node_likes_user_id_fkey', ondelete='CASCADE'),
    # sa.PrimaryKeyConstraint('id', name='node_likes_pkey')
    # )
    # op.create_index('ix_node_likes_id', 'node_likes', ['id'], unique=False)
    # op.create_table('anchors',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('anchor_title', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('status', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('latitude', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('longitude', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name='anchors_pkey'),
    # sa.UniqueConstraint('anchor_title', name='anchors_anchor_title_key')
    # )
    # op.create_index('ix_anchors_id', 'anchors', ['id'], unique=False)
    # op.create_table('subscriptions',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('follower_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name='subscriptions_pkey')
    # )
    # op.create_index('ix_subscriptions_id', 'subscriptions', ['id'], unique=False)
    # op.create_table('objectfiles',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('object_file_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('object_file_name', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('object_file_uuid', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('object_file_count', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('object_file_type', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('object_file_path', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('asset_file_reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('asset_file_mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['owner_id'], ['users.user_id'], name='objectfiles_owner_id_fkey', ondelete='CASCADE'),
    # sa.PrimaryKeyConstraint('id', name='objectfiles_pkey')
    # )
    # op.create_table('node_tags',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('node_id', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('tag', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name='node_tags_pkey')
    # )
    # op.create_index('ix_node_tags_id', 'node_tags', ['id'], unique=False)
    # op.create_table('obj_comments',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('object_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('comment', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='obj_comments_user_id_fkey', ondelete='CASCADE'),
    # sa.PrimaryKeyConstraint('id', name='obj_comments_pkey')
    # )
    # op.create_index('ix_obj_comments_id', 'obj_comments', ['id'], unique=False)
    # op.create_table('objects',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('object_title', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('object_description', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('object_type', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('status', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('conversion_status', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    # sa.Column('object_uuid', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('object_file_path', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('object_file_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('object_thumb_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='objects_user_id_fkey', ondelete='CASCADE'),
    # sa.PrimaryKeyConstraint('id', name='objects_pkey'),
    # sa.UniqueConstraint('object_title', name='objects_object_title_key')
    # )
    # op.create_index('ix_objects_id', 'objects', ['id'], unique=False)
    # op.create_table('videos',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('node_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('video_uuid', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('video_file_path', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('video_file_name', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('video_thumb_name', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    # sa.Column('reg_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('mod_dt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['node_id'], ['nodes.id'], name='videos_node_id_fkey', ondelete='CASCADE'),
    # sa.PrimaryKeyConstraint('id', name='videos_pkey')
    # )
    # op.create_index('ix_videos_id', 'videos', ['id'], unique=False)
    # # ### end Alembic commands ###
    pass
